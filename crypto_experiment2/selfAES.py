# coding: utf-8
# -**- author: byc_404 -**-
import binascii



class AES:
    def __init__(self, key):
        self.key = key
        if len(self.key) not in [16, 24, 32]:
            raise ValueError("Invalid key size")

        self.rounds = {16: 10, 24: 12, 32: 14}
        self.process_rounds = self.rounds[len(self.key)]
        self.plaintext = b""
        self.ciphertext = b""
        self.state = []
        self.S_box = (
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82,
            0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,
            0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96,
            0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
            0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb,
            0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,
            0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff,
            0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32,
            0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
            0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
            0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
            0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e,
            0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
            0xb0, 0x54, 0xbb, 0x16,)
        self.inv_S_box = (
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3,
            0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,
            0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9,
            0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
            0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15,
            0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,
            0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13,
            0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1,
            0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,
            0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
            0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
            0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb,
            0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,
            0x55, 0x21, 0x0c, 0x7d,)
        self.R_con = (
            0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E,
            0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,)

    def addRoundKey(self, key):
        """
        :param
        :return:
        """
        for i in range(16):
            self.state[i] ^= key[i]

    def subBytes(self):
        """
        bytes substitution with SBox
        :return:
        """
        for i in range(16):
            self.state[i] = self.S_box[self.state[i]]

    def inv_subBytes(self):
        """

        :return:
        """
        for i in range(16):
            self.state[i] = self.inv_S_box[self.state[i]]

    def shiftRows(self):
        """

        :return:
        """
        s = self.state
        self.state[:] = list(s[0::5] + s[4::5] + s[3:4:5] + s[8::5] + s[2:8:5] + s[12::5] + s[1:12:5])

    def inv_shiftRows(self):
        """

        :return:
        """
        s = self.state
        self.state[:] = [s[0], s[13], s[10], s[7], s[4], s[1], s[14], s[11], s[8], s[5], s[2], s[15], s[12], s[9], s[6],
                         s[3]]

    def mix_Columns(self):
        """

        :return:
        """
        s = self.state
        #  https://github.com/bozhu/AES-Python/blob/master/aes.py
        xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)
        for i in range(4):
            t = s[4 * i] ^ s[4 * i + 1] ^ s[4 * i + 2] ^ s[4 * i + 3]
            u = s[4 * i]
            s[4 * i] ^= t ^ xtime(s[4 * i] ^ s[4 * i + 1])
            s[4 * i + 1] ^= t ^ xtime(s[4 * i + 1] ^ s[4 * i + 2])
            s[4 * i + 2] ^= t ^ xtime(s[4 * i + 2] ^ s[4 * i + 3])
            s[4 * i + 3] ^= t ^ xtime(s[4 * i + 3] ^ u)

    def inv_mix_Columns(self):
        """

        :return:
        """
        s = self.state
        for i in range(4):
            s[4 * i], s[4 * i + 1], s[4 * i + 2], s[4 * i + 3] = \
                gmul(0x0e, s[4 * i]) ^ gmul(0x0b, s[4 * i + 1]) ^ gmul(0x0d, s[4 * i + 2]) ^ gmul(0x09, s[4 * i + 3]), \
                gmul(0x09, s[4 * i]) ^ gmul(0x0e, s[4 * i + 1]) ^ gmul(0x0b, s[4 * i + 2]) ^ gmul(0x0d, s[4 * i + 3]), \
                gmul(0x0d, s[4 * i]) ^ gmul(0x09, s[4 * i + 1]) ^ gmul(0x0e, s[4 * i + 2]) ^ gmul(0x0b, s[4 * i + 3]), \
                gmul(0x0b, s[4 * i]) ^ gmul(0x0d, s[4 * i + 1]) ^ gmul(0x09, s[4 * i + 2]) ^ gmul(0x0e, s[4 * i + 3])

    def subWord(self, w):
        """

        :return:
        """
        return [self.S_box[w[i]] for i in range(4)]

    def shiftWord(self, w):
        """

        :param w:
        :return: shift by one place eg. [172, 193, 7, 189] => [193, 7, 189, 172]
        """
        return w[1:] + w[0:1]

    def xorWord(self, w1, w2):
        """

        :param w1:
        :param w2:
        :return:
        """
        return [w1[i] ^ w2[i] for i in range(4)]

    def keyExpansion(self):
        """
        :return: key_set_w
        """
        k = list(self.key)
        Nk = len(k) // 4
        key_set_w = [k[i:i + 4] for i in range(0, 4 * Nk, 4)]

        i = Nk  # Nk = 4
        while i < 4 * (self.process_rounds + 1):
            t = key_set_w[i - 1]
            if i % Nk == 0:
                tmp = self.subWord(self.shiftWord(t))
                t = [tmp[0] ^ self.R_con[i // Nk]] + tmp[1:]
            elif i > 6 and i % Nk == 4:
                t = self.subWord(t)
            key_set_w.append(self.xorWord(t, key_set_w[i - Nk]))
            i += 1
        return key_set_w

    def encrypt(self, plaintext):

        sub_keys = self.keyExpansion()
        used_key = sub_keys[0] + sub_keys[1] + sub_keys[2] + sub_keys[3]
        self.state = list(plaintext)
        self.addRoundKey(used_key)

        for r in range(self.process_rounds):
            self.subBytes()
            self.shiftRows()
            if r != self.process_rounds - 1:  # skip the final round
                self.mix_Columns()
            used_key = sub_keys[4 * (r + 1)] + sub_keys[4 * (r + 1) + 1] + sub_keys[4 * (r + 1) + 2] + sub_keys[
                4 * (r + 1) + 3]
            self.addRoundKey(used_key)
        self.ciphertext = bytes(self.state)
        return self.ciphertext

    def decrypt(self, ciphertext):
        sub_keys = self.keyExpansion()
        used_key = sub_keys[-4] + sub_keys[-3] + sub_keys[-2] + sub_keys[-1]

        self.state = list(ciphertext)
        self.addRoundKey(used_key)

        for r in range(self.process_rounds):
            self.inv_shiftRows()
            self.inv_subBytes()
            used_key = sub_keys[-4 * (r + 1) - 4] + sub_keys[-4 * (r + 1) - 3] + sub_keys[-4 * (r + 1) - 2] + sub_keys[
                -4 * (r + 1) - 1]
            self.addRoundKey(used_key)
            if r != self.process_rounds - 1:  # skip the final round
                self.inv_mix_Columns()

        self.plaintext = bytes(self.state)
        return self.plaintext


def gmul(a, b):
    '''
    :return: aâ€¢b over GF(2^8)
    '''
    p = 0
    while a and b:
        if b & 0x1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x11b
        b >>= 1
    return p


if __name__ == '__main__':
    key192 = bytes(
        [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
         0x12, 0x13, 0x14, 0x15, 0x16, 0x17])
    key256 = bytes(
        [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
         0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f])


    key128 = bytes([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
    plaintext = bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff])

    print('plaintext in hex', binascii.hexlify(plaintext).decode())
    print('key in hex', binascii.hexlify(key128).decode())

    cipher = AES(key128).encrypt(plaintext)
    print('cipher in hex : ', binascii.hexlify(cipher).decode())

    plain = binascii.hexlify(AES(key128).decrypt(cipher)).decode()
    print('Decrypted plaintext: ', plain)
    assert  plain == binascii.hexlify(plaintext).decode()
